---
 README.PTX |   12 ++++++++++
 conf.c     |   41 ++++++++++++++++++++++++++++++++++-
 confdata.c |   71 +++++++++++++++++++++++++++++--------------------------------
 gconf.c    |    4 +--
 lkc.h      |    6 +++++
 mconf.c    |   59 ++++++++++++++++++++++----------------------------
 symbol.c   |   15 ------------
 zconf.y    |    2 -
 8 files changed, 121 insertions(+), 89 deletions(-)

Index: kconfig/conf.c
===================================================================
--- kconfig.orig/conf.c
+++ kconfig/conf.c
@@ -428,21 +428,56 @@ static void check_conf(struct menu *menu
 		check_conf(child);
 }
 
+static void create_dep_output()
+{
+	int i;
+	bool hit;
+	struct symbol *sym;
+	struct property *prop;
+
+	for_all_symbols(i, sym) {
+		if ((sym_get_tristate_value(sym) == no) || !sym->name)
+			continue;
+
+		hit = 0;
+		for (prop = sym->prop; prop; prop = prop->next) {
+			if (prop->type == P_SELECT && expr_calc_value(prop->visible.expr)) {
+				hit=1;
+				break;
+			}
+		}
+		if (!hit)
+			continue;
+		printf("DEP:%s", sym->name);
+		for (prop = sym->prop; prop; prop = prop->next) {
+			if (prop->type == P_SELECT && expr_calc_value(prop->visible.expr)) {
+				printf(":%s", prop->expr->left.sym->name);
+			}
+		}
+		printf("\n");
+	}
+}
+
 int main(int ac, char **av)
 {
 	int opt;
 	const char *name;
 	struct stat tmpstat;
+	int dep_output = 0;
 
 	setlocale(LC_ALL, "");
 	bindtextdomain(PACKAGE, LOCALEDIR);
 	textdomain(PACKAGE);
 
-	while ((opt = getopt(ac, av, "osdD:nmyrh")) != -1) {
+	while ((opt = getopt(ac, av, "oOsdD:nmyrh")) != -1) {
 		switch (opt) {
 		case 'o':
 			input_mode = ask_silent;
 			break;
+		case 'O':
+			input_mode = ask_silent;
+			dep_output = 1;
+			break;
 		case 's':
 			input_mode = ask_silent;
 			sync_kconfig = 1;
@@ -511,6 +546,8 @@ int main(int ac, char **av)
 	case ask_all:
 	case ask_new:
 		conf_read(NULL);
+		if (dep_output)
+			create_dep_output();
 		break;
 	case set_no:
 	case set_mod:
@@ -588,10 +625,12 @@ int main(int ac, char **av)
 			fprintf(stderr, _("\n*** Error during writing of the kernel configuration.\n\n"));
 			exit(1);
 		}
+#if 0
 		if (conf_write_autoconf()) {
 			fprintf(stderr, _("\n*** Error during update of the kernel configuration.\n\n"));
 			return 1;
 		}
+#endif
 	} else {
 		if (conf_write(NULL)) {
 			fprintf(stderr, _("\n*** Error during writing of the kernel configuration.\n\n"));
Index: kconfig/confdata.c
===================================================================
--- kconfig.orig/confdata.c
+++ kconfig/confdata.c
@@ -21,7 +21,7 @@ static void conf_warning(const char *fmt
 static const char *conf_filename;
 static int conf_lineno, conf_warnings, conf_unsaved;
 
-const char conf_defname[] = "arch/$ARCH/defconfig";
+const char conf_defname[] = "defconfig";
 
 static void conf_warning(const char *fmt, ...)
 {
@@ -212,22 +212,22 @@ load:
 		sym = NULL;
 		switch (line[0]) {
 		case '#':
-			if (memcmp(line + 2, "CONFIG_", 7))
+			if (memcmp(line + 2, CFGSYM, CFGSYMLEN))
 				continue;
-			p = strchr(line + 9, ' ');
+			p = strchr(line + CFGSYMLEN+2, ' ');
 			if (!p)
 				continue;
 			*p++ = 0;
 			if (strncmp(p, "is not set", 10))
 				continue;
 			if (def == S_DEF_USER) {
-				sym = sym_find(line + 9);
+				sym = sym_find(line + CFGSYMLEN+2);
 				if (!sym) {
 					sym_add_change_count(1);
 					break;
 				}
 			} else {
-				sym = sym_lookup(line + 9, 0);
+				sym = sym_lookup(line + CFGSYMLEN+2, 0);
 				if (sym->type == S_UNKNOWN)
 					sym->type = S_BOOLEAN;
 			}
@@ -244,12 +244,12 @@ load:
 				;
 			}
 			break;
-		case 'C':
-			if (memcmp(line, "CONFIG_", 7)) {
+		case CFGSYMFC:
+			if (memcmp(line, CFGSYM, CFGSYMLEN)) {
 				conf_warning("unexpected data");
 				continue;
 			}
-			p = strchr(line + 7, '=');
+			p = strchr(line + CFGSYMLEN, '=');
 			if (!p)
 				continue;
 			*p++ = 0;
@@ -260,13 +260,13 @@ load:
 					*p2 = 0;
 			}
 			if (def == S_DEF_USER) {
-				sym = sym_find(line + 7);
+				sym = sym_find(line + CFGSYMLEN);
 				if (!sym) {
 					sym_add_change_count(1);
 					break;
 				}
 			} else {
-				sym = sym_lookup(line + 7, 0);
+				sym = sym_lookup(line + CFGSYMLEN, 0);
 				if (sym->type == S_UNKNOWN)
 					sym->type = S_OTHER;
 			}
@@ -436,8 +436,6 @@ int conf_write(const char *name)
 	if (!out)
 		return 1;
 
-	sym = sym_lookup("KERNELVERSION", 0);
-	sym_calc_value(sym);
 	time(&now);
 	env = getenv("KCONFIG_NOTIMESTAMP");
 	if (env && *env)
@@ -445,10 +443,10 @@ int conf_write(const char *name)
 
 	fprintf(out, _("#\n"
 		       "# Automatically generated make config: don't edit\n"
-		       "# Linux kernel version: %s\n"
+		       "# %s version: %s\n"
 		       "%s%s"
 		       "#\n"),
-		     sym_get_string_value(sym),
+		     getenv("PROJECT"), getenv("FULLVERSION"),
 		     use_timestamp ? "# " : "",
 		     use_timestamp ? ctime(&now) : "");
 
@@ -482,19 +480,19 @@ int conf_write(const char *name)
 			case S_TRISTATE:
 				switch (sym_get_tristate_value(sym)) {
 				case no:
-					fprintf(out, "# CONFIG_%s is not set\n", sym->name);
+					fprintf(out, "# " CFGSYM "%s is not set\n", sym->name);
 					break;
 				case mod:
-					fprintf(out, "CONFIG_%s=m\n", sym->name);
+					fprintf(out, CFGSYM "%s=m\n", sym->name);
 					break;
 				case yes:
-					fprintf(out, "CONFIG_%s=y\n", sym->name);
+					fprintf(out, CFGSYM "%s=y\n", sym->name);
 					break;
 				}
 				break;
 			case S_STRING:
 				str = sym_get_string_value(sym);
-				fprintf(out, "CONFIG_%s=\"", sym->name);
+				fprintf(out, CFGSYM "%s=\"", sym->name);
 				while (1) {
 					l = strcspn(str, "\"\\");
 					if (l) {
@@ -510,12 +508,12 @@ int conf_write(const char *name)
 			case S_HEX:
 				str = sym_get_string_value(sym);
 				if (str[0] != '0' || (str[1] != 'x' && str[1] != 'X')) {
-					fprintf(out, "CONFIG_%s=%s\n", sym->name, str);
+					fprintf(out, CFGSYM "%s=%s\n", sym->name, str);
 					break;
 				}
 			case S_INT:
 				str = sym_get_string_value(sym);
-				fprintf(out, "CONFIG_%s=%s\n", sym->name, str);
+				fprintf(out, CFGSYM "%s=%s\n", sym->name, str);
 				break;
 			}
 		}
@@ -553,6 +551,7 @@ int conf_write(const char *name)
 	return 0;
 }
 
+#if 0
 int conf_split_config(void)
 {
 	char *name, path[128];
@@ -692,22 +691,19 @@ int conf_write_autoconf(void)
 		return 1;
 	}
 
-	sym = sym_lookup("KERNELVERSION", 0);
-	sym_calc_value(sym);
 	time(&now);
 	fprintf(out, "#\n"
 		     "# Automatically generated make config: don't edit\n"
-		     "# Linux kernel version: %s\n"
-		     "# %s"
+		     "# %s version: %s\n"
 		     "#\n",
-		     sym_get_string_value(sym), ctime(&now));
+		getenv("PROJECT"), getenv("FULLVERSION"));
 	fprintf(out_h, "/*\n"
 		       " * Automatically generated C config: don't edit\n"
-		       " * Linux kernel version: %s\n"
+		       " * %s version: %s\n"
 		       " * %s"
 		       " */\n"
 		       "#define AUTOCONF_INCLUDED\n",
-		       sym_get_string_value(sym), ctime(&now));
+		getenv("PROJECT"), getenv("FULLVERSION"), ctime(&now));
 
 	for_all_symbols(i, sym) {
 		sym_calc_value(sym);
@@ -720,19 +716,19 @@ int conf_write_autoconf(void)
 			case no:
 				break;
 			case mod:
-				fprintf(out, "CONFIG_%s=m\n", sym->name);
-				fprintf(out_h, "#define CONFIG_%s_MODULE 1\n", sym->name);
+				fprintf(out, CFGSYM "%s=m\n", sym->name);
+				fprintf(out_h, "#define " CFGSYM "%s_MODULE 1\n", sym->name);
 				break;
 			case yes:
-				fprintf(out, "CONFIG_%s=y\n", sym->name);
-				fprintf(out_h, "#define CONFIG_%s 1\n", sym->name);
+				fprintf(out, CFGSYM "%s=y\n", sym->name);
+				fprintf(out_h, "#define " CFGSYM "%s 1\n", sym->name);
 				break;
 			}
 			break;
 		case S_STRING:
 			str = sym_get_string_value(sym);
-			fprintf(out, "CONFIG_%s=\"", sym->name);
-			fprintf(out_h, "#define CONFIG_%s \"", sym->name);
+			fprintf(out, CFGSYM "%s=\"", sym->name);
+			fprintf(out_h, "#define " CFGSYM "%s \"", sym->name);
 			while (1) {
 				l = strcspn(str, "\"\\");
 				if (l) {
@@ -752,14 +748,14 @@ int conf_write_autoconf(void)
 		case S_HEX:
 			str = sym_get_string_value(sym);
 			if (str[0] != '0' || (str[1] != 'x' && str[1] != 'X')) {
-				fprintf(out, "CONFIG_%s=%s\n", sym->name, str);
-				fprintf(out_h, "#define CONFIG_%s 0x%s\n", sym->name, str);
+				fprintf(out, CFGSYM "%s=%s\n", sym->name, str);
+				fprintf(out_h, "#define " CFGSYM "%s 0x%s\n", sym->name, str);
 				break;
 			}
 		case S_INT:
 			str = sym_get_string_value(sym);
-			fprintf(out, "CONFIG_%s=%s\n", sym->name, str);
-			fprintf(out_h, "#define CONFIG_%s %s\n", sym->name, str);
+			fprintf(out, CFGSYM "%s=%s\n", sym->name, str);
+			fprintf(out_h, "#define " CFGSYM "%s %s\n", sym->name, str);
 			break;
 		default:
 			break;
@@ -785,6 +781,7 @@ int conf_write_autoconf(void)
 
 	return 0;
 }
+#endif
 
 static int sym_change_count;
 static void (*conf_changed_callback)(void);
Index: kconfig/gconf.c
===================================================================
--- kconfig.orig/gconf.c
+++ kconfig/gconf.c
@@ -266,8 +266,8 @@ void init_main_window(const gchar * glad
 					  /*"style", PANGO_STYLE_OBLIQUE, */
 					  NULL);
 
-	sprintf(title, _("Linux Kernel v%s Configuration"),
-		getenv("KERNELVERSION"));
+	sprintf(title, "%s v%s Configuration",
+		getenv("PROJECT"), getenv("FULLVERSION"));
 	gtk_window_set_title(GTK_WINDOW(main_wnd), title);
 
 	gtk_widget_show(main_wnd);
Index: kconfig/lkc.h
===================================================================
--- kconfig.orig/lkc.h
+++ kconfig/lkc.h
@@ -31,6 +31,12 @@ extern "C" {
 
 #define SRCTREE "srctree"
 
+#define CFGSYM "PTXCONF_"
+#define CFGSYMFC 'P'
+#define CFGSYMLEN 8
+#define RELEASESYM "FULLVERSION"
+#define RELEASENAME "PTXdist"
+
 #define PACKAGE "linux"
 #define LOCALEDIR "/usr/share/locale"
 
Index: kconfig/mconf.c
===================================================================
--- kconfig.orig/mconf.c
+++ kconfig/mconf.c
@@ -25,10 +25,7 @@
 static const char mconf_readme[] = N_(
 "Overview\n"
 "--------\n"
-"Some kernel features may be built directly into the kernel.\n"
-"Some may be made into loadable runtime modules.  Some features\n"
-"may be completely removed altogether.  There are also certain\n"
-"kernel parameters which are not really features, but must be\n"
+"Some parameters are not really features, but must be\n"
 "entered in as decimal or hexadecimal numbers or possibly text.\n"
 "\n"
 "Menu items beginning with following braces represent features that\n"
@@ -115,7 +112,7 @@ static const char mconf_readme[] = N_(
 "-----------------------------\n"
 "Menuconfig supports the use of alternate configuration files for\n"
 "those who, for various reasons, find it necessary to switch\n"
-"between different kernel configurations.\n"
+"between different configurations.\n"
 "\n"
 "At the end of the main menu you will find two options.  One is\n"
 "for saving the current configuration to a file of your choosing.\n"
@@ -148,7 +145,7 @@ static const char mconf_readme[] = N_(
 "\n"
 "Optional personality available\n"
 "------------------------------\n"
-"If you prefer to have all of the kernel options listed in a single\n"
+"If you prefer to have all of the options listed in a single\n"
 "menu, rather than the default multimenu hierarchy, run the menuconfig\n"
 "with MENUCONFIG_MODE environment variable set to single_menu. Example:\n"
 "\n"
@@ -200,18 +197,18 @@ setmod_text[] = N_(
 	"This feature depends on another which has been configured as a module.\n"
 	"As a result, this feature will be built as a module."),
 nohelp_text[] = N_(
-	"There is no help available for this kernel option.\n"),
+	"There is no help available for this option.\n"),
 load_config_text[] = N_(
 	"Enter the name of the configuration file you wish to load.  "
 	"Accept the name shown to restore the configuration you "
 	"last retrieved.  Leave blank to abort."),
 load_config_help[] = N_(
 	"\n"
-	"For various reasons, one may wish to keep several different kernel\n"
+	"For various reasons, one may wish to keep several different\n"
 	"configurations available on a single machine.\n"
 	"\n"
 	"If you have saved a previous configuration in a file other than the\n"
-	"kernel's default, entering the name of the file here will allow you\n"
+	"default, entering the name of the file here will allow you\n"
 	"to modify that configuration.\n"
 	"\n"
 	"If you are uncertain, then you have probably never used alternate\n"
@@ -221,7 +218,7 @@ save_config_text[] = N_(
 	"as an alternate.  Leave blank to abort."),
 save_config_help[] = N_(
 	"\n"
-	"For various reasons, one may wish to keep different kernel\n"
+	"For various reasons, one may wish to keep different\n"
 	"configurations available on a single machine.\n"
 	"\n"
 	"Entering a file name here will allow you to later retrieve, modify\n"
@@ -232,7 +229,7 @@ save_config_help[] = N_(
 	"leave this blank.\n"),
 search_help[] = N_(
 	"\n"
-	"Search for CONFIG_ symbols and display their relations.\n"
+	"Search for " CFGSYM " symbols and display their relations.\n"
 	"Regular expressions are allowed.\n"
 	"Example: search for \"^FOO\"\n"
 	"Result:\n"
@@ -249,7 +246,7 @@ search_help[] = N_(
 	"Selected by: BAR\n"
 	"-----------------------------------------------------------------\n"
 	"o The line 'Prompt:' shows the text used in the menu structure for\n"
-	"  this CONFIG_ symbol\n"
+	"  this " CFGSYM " symbol\n"
 	"o The 'Defined at' line tell at what file / line number the symbol\n"
 	"  is defined\n"
 	"o The 'Depends on:' line tell what symbols needs to be defined for\n"
@@ -265,9 +262,9 @@ search_help[] = N_(
 	"Only relevant lines are shown.\n"
 	"\n\n"
 	"Search examples:\n"
-	"Examples: USB	=> find all CONFIG_ symbols containing USB\n"
-	"          ^USB => find all CONFIG_ symbols starting with USB\n"
-	"          USB$ => find all CONFIG_ symbols ending with USB\n"
+	"Examples: USB	=> find all " CFGSYM " symbols containing USB\n"
+	"          ^USB => find all " CFGSYM " symbols starting with USB\n"
+	"          USB$ => find all " CFGSYM " symbols ending with USB\n"
 	"\n");
 
 static int indent;
@@ -362,13 +359,9 @@ static void set_config_filename(const ch
 {
 	static char menu_backtitle[PATH_MAX+128];
 	int size;
-	struct symbol *sym;
 
-	sym = sym_lookup("KERNELVERSION", 0);
-	sym_calc_value(sym);
-	size = snprintf(menu_backtitle, sizeof(menu_backtitle),
-	                _("%s - Linux Kernel v%s Configuration"),
-		        config_filename, sym_get_string_value(sym));
+	size = sprintf(menu_backtitle, "%s v%s Configuration",
+		getenv("PROJECT"), getenv("FULLVERSION"));
 	if (size >= sizeof(menu_backtitle))
 		menu_backtitle[sizeof(menu_backtitle)-1] = '\0';
 	set_dialog_backtitle(menu_backtitle);
@@ -388,8 +381,8 @@ static void search_conf(void)
 again:
 	dialog_clear();
 	dres = dialog_inputbox(_("Search Configuration Parameter"),
-			      _("Enter CONFIG_ (sub)string to search for "
-				"(with or without \"CONFIG\")"),
+			      _("Enter " CFGSYM " (sub)string to search for "
+				"(with or without \"" CFGSYM "\")"),
 			      10, 75, "");
 	switch (dres) {
 	case 0:
@@ -401,10 +394,10 @@ again:
 		return;
 	}
 
-	/* strip CONFIG_ if necessary */
+	/* strip CFGSYM if necessary */
 	dialog_input = dialog_input_result;
-	if (strncasecmp(dialog_input_result, "CONFIG_", 7) == 0)
-		dialog_input += 7;
+	if (strncasecmp(dialog_input_result, CFGSYM, CFGSYMLEN) == 0)
+		dialog_input += CFGSYMLEN;
 
 	sym_arr = sym_re_search(dialog_input);
 	res = get_relations_str(sym_arr);
@@ -704,7 +697,7 @@ static void show_help(struct menu *menu)
 	if (menu_has_help(menu))
 	{
 		if (sym->name) {
-			str_printf(&help, "CONFIG_%s:\n\n", sym->name);
+			str_printf(&help, CFGSYM "%s:\n\n", sym->name);
 			str_append(&help, _(menu_get_help(menu)));
 			str_append(&help, "\n");
 		}
@@ -894,7 +887,7 @@ int main(int ac, char **av)
 		if (conf_get_changed())
 			res = dialog_yesno(NULL,
 					   _("Do you wish to save your "
-					     "new kernel configuration?\n"
+					     "new configuration?\n"
 					     "<ESC><ESC> to continue."),
 					   6, 60);
 		else
@@ -906,20 +899,20 @@ int main(int ac, char **av)
 	case 0:
 		if (conf_write(filename)) {
 			fprintf(stderr, _("\n\n"
-				"Error during writing of the kernel configuration.\n"
-				"Your kernel configuration changes were NOT saved."
+				"Error during writing of the configuration.\n"
+				"Your configuration changes were NOT saved."
 				"\n\n"));
 			return 1;
 		}
 	case -1:
 		printf(_("\n\n"
-			"*** End of Linux kernel configuration.\n"
-			"*** Execute 'make' to build the kernel or try 'make help'."
+			"*** End of project configuration.\n"
+			"*** Execute 'ptxdist go' to build the project or try 'ptxdist help'."
 			"\n\n"));
 		break;
 	default:
 		fprintf(stderr, _("\n\n"
-			"Your kernel configuration changes were NOT saved."
+			"Your configuration changes were NOT saved."
 			"\n\n"));
 	}
 
Index: kconfig/README.PTX
===================================================================
--- /dev/null
+++ kconfig/README.PTX
@@ -0,0 +1,12 @@
+README.PTX
+==========
+
+This is a copy of the linux-2.6.28 scripts/kconfig directory.
+
+To update to a new kconfig version copy the kconfig directory from the kernel
+and replace Makefile with that one to be found in ../ptx-modifications, apply
+patch serie, uncoment 'LKC_GENPARSER := 1' in Makefile and run make to update
+'shipped' files.
+
+Robert Schwebel <r.schwebel@pengutronix.de>
+
Index: kconfig/symbol.c
===================================================================
--- kconfig.orig/symbol.c
+++ kconfig/symbol.c
@@ -7,7 +7,6 @@
 #include <stdlib.h>
 #include <string.h>
 #include <regex.h>
-#include <sys/utsname.h>
 
 #define LKC_DIRECT_LINK
 #include "lkc.h"
@@ -45,20 +44,6 @@ void sym_add_default(struct symbol *sym,
 
 void sym_init(void)
 {
-	struct symbol *sym;
-	struct utsname uts;
-	static bool inited = false;
-
-	if (inited)
-		return;
-	inited = true;
-
-	uname(&uts);
-
-	sym = sym_lookup("UNAME_RELEASE", 0);
-	sym->type = S_STRING;
-	sym->flags |= SYMBOL_AUTO;
-	sym_add_default(sym, uts.release);
 }
 
 enum symbol_type sym_get_type(struct symbol *sym)
Index: kconfig/zconf.y
===================================================================
--- kconfig.orig/zconf.y
+++ kconfig/zconf.y
@@ -476,7 +476,7 @@ void conf_parse(const char *name)
 	modules_sym = sym_lookup(NULL, 0);
 	modules_sym->type = S_BOOLEAN;
 	modules_sym->flags |= SYMBOL_AUTO;
-	rootmenu.prompt = menu_add_prompt(P_MENU, "Linux Kernel Configuration", NULL);
+	rootmenu.prompt = menu_add_prompt(P_MENU, "Powered by PTXdist - http://www.pengutronix.de/software/ptxdist/", NULL);
 
 #if YYDEBUG
 	if (getenv("ZCONF_DEBUG"))
