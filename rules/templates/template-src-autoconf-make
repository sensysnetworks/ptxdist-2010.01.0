# -*-makefile-*-
#
# Copyright (C) @YEAR@ by @AUTHOR@
#
# See CREDITS for details about who has contributed to this project.
#
# For further information about the PTXdist project and license conditions
# see the README file.
#

#
# We provide this package
#
PACKAGES-$(PTXCONF_@PACKET@) += @packet@

#
# Paths and names
#
@PACKET@_VERSION	:= @VERSION@
@PACKET@		:= @packet@-$(@PACKET@_VERSION)
@PACKET@_SRCDIR		:= $(PTXDIST_WORKSPACE)/local_src/$(@PACKET@)
@PACKET@_DIR		:= $(BUILDDIR)/$(@PACKET@)
@PACKET@_LICENSE	:= unknown

# ----------------------------------------------------------------------------
# Get
# ----------------------------------------------------------------------------

# ----------------------------------------------------------------------------
# Extract
# ----------------------------------------------------------------------------

$(STATEDIR)/@packet@.extract:
	@$(call targetinfo)
	@$(call clean, $(@PACKET@_DIR))
ifdef PTXCONF_@PACKET@_TRUNK
	cd $(@PACKET@_SRCDIR) && sh autogen.sh
endif
	@$(call patchin, @PACKET@, $(@PACKET@_SRCDIR))
	mkdir -p $(@PACKET@_DIR)
	@$(call touch)

# ----------------------------------------------------------------------------
# Prepare
# ----------------------------------------------------------------------------

@PACKET@_PATH	:= PATH=$(CROSS_PATH)
@PACKET@_ENV 	:= $(CROSS_ENV)

#
# autoconf
#
@PACKET@_AUTOCONF := \
	$(CROSS_AUTOCONF_USR)

#$(STATEDIR)/@packet@.prepare:
#	@$(call targetinfo)
#	@$(call clean, $(@PACKET@_DIR)/config.cache)
#	cd $(@PACKET@_DIR) && \
#		$(@PACKET@_PATH) $(@PACKET@_ENV) \
#		$(@PACKET@_SRCDIR)/configure $(@PACKET@_AUTOCONF)
#	@$(call touch)

# ----------------------------------------------------------------------------
# Compile
# ----------------------------------------------------------------------------

#$(STATEDIR)/@packet@.compile:
#	@$(call targetinfo)
#	cd $(@PACKET@_DIR) && $(@PACKET@_ENV) $(@PACKET@_PATH) $(MAKE) $(PARALLELMFLAGS)
#	@$(call touch)

# ----------------------------------------------------------------------------
# Install
# ----------------------------------------------------------------------------

#$(STATEDIR)/@packet@.install:
#	@$(call targetinfo)
#	@$(call install, @PACKET@)
#	@$(call touch)

# ----------------------------------------------------------------------------
# Target-Install
# ----------------------------------------------------------------------------

$(STATEDIR)/@packet@.targetinstall:
	@$(call targetinfo)

	@$(call install_init,  @packet@)
	@$(call install_fixup, @packet@, PACKAGE, @packet@)
	@$(call install_fixup, @packet@, PRIORITY, optional)
	@$(call install_fixup, @packet@, VERSION, @VERSION@)
	@$(call install_fixup, @packet@, SECTION, base)
	@$(call install_fixup, @packet@, AUTHOR, "@AUTHOR@")
	@$(call install_fixup, @packet@, DEPENDS,)
	@$(call install_fixup, @packet@, DESCRIPTION, missing)

#	#
#	# example code:; copy all libraries, links and binaries
#	#

	@for i in $(shell cd $(PKGDIR)/$(@PACKET@) && find bin sbin usr/bin usr/sbin -type f); do \
		$(call install_copy, @packet@, 0, 0, 0755, -, /$$i); \
	done
	@for i in $(shell cd $(PKGDIR)/$(@PACKET@) && find lib usr/lib -name "*.so*"); do \
		$(call install_copy, @packet@, 0, 0, 0644, -, /$$i); \
	done
	@links="$(shell cd $(PKGDIR)/$(@PACKET@) && find lib usr/lib -type l)"; \
	if [ -n "$$links" ]; then \
		for i in $$links; do \
			from="`readlink $(PKGDIR)/$(@PACKET@)/$$i`"; \
			to="/$$i"; \
			$(call install_link, @packet@, $$from, $$to); \
		done; \
	fi

#	#
#	# FIXME: add all necessary things here
#	#

	@$(call install_finish, @packet@)

	@$(call touch)

# ----------------------------------------------------------------------------
# Clean
# ----------------------------------------------------------------------------

@packet@_clean:
	rm -rf $(STATEDIR)/@packet@.*
	rm -rf $(PKGDIR)/@packet@_*
	rm -rf $(@PACKET@_DIR)

# vim: syntax=make
