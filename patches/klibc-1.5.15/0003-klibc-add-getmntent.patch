From d2ad1cf968af5c938a0262914f764667a449ffe1 Mon Sep 17 00:00:00 2001
From: maximilian attems <max@stro.at>
Date: Sun, 24 Aug 2008 00:48:12 +0200
Subject: [PATCH 03/21] [klibc] add getmntent()

internaly use reentrant getmntent_r(), can be exported on need.
take care to use reentrant strtok_r() functions too.
Thanks to Karel Zak <kzak@redhat.com> for pointing that out.

getmntent is used in several places to check that a news fs
won't be created on an already mounted partition.
it is also needed for mount(8) to list mounted fs.

Signed-off-by: maximilian attems <max@stro.at>
---
 usr/include/mntent.h  |    2 +
 usr/klibc/Kbuild      |    2 +-
 usr/klibc/getmntent.c |   61 +++++++++++++++++++++++++++++++++++++++++++++++++
 3 files changed, 64 insertions(+), 1 deletions(-)
 create mode 100644 usr/klibc/getmntent.c

diff --git a/usr/include/mntent.h b/usr/include/mntent.h
index ca6b211..210610c 100644
--- a/usr/include/mntent.h
+++ b/usr/include/mntent.h
@@ -12,6 +12,8 @@ struct mntent {
 
 extern FILE *setmntent(const char *, const char *);
 
+extern struct mntent *getmntent(FILE *);
+
 extern int endmntent(FILE *fp);
 
 #endif  /* mntent.h */
diff --git a/usr/klibc/Kbuild b/usr/klibc/Kbuild
index 842a79f..1f505c2 100644
--- a/usr/klibc/Kbuild
+++ b/usr/klibc/Kbuild
@@ -57,7 +57,7 @@ klib-y := vsnprintf.o snprintf.o vsprintf.o sprintf.o \
 	  ctype/isxdigit.o ctype/tolower.o ctype/toupper.o \
 	  userdb/getgrgid.o userdb/getgrnam.o userdb/getpwnam.o \
 	  userdb/getpwuid.o userdb/root_group.o userdb/root_user.o \
-	  setmntent.o endmntent.o
+	  setmntent.o endmntent.o getmntent.o
 
 klib-$(CONFIG_KLIBC_ERRLIST) += errlist.o
 
diff --git a/usr/klibc/getmntent.c b/usr/klibc/getmntent.c
new file mode 100644
index 0000000..8af27f3
--- /dev/null
+++ b/usr/klibc/getmntent.c
@@ -0,0 +1,61 @@
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <mntent.h>
+
+#define BUFLEN 1024
+
+struct mntent *getmntent_r(FILE *fp, struct mntent *mntbuf, char *buf,
+		int buflen)
+{
+	char *line = NULL, *saveptr = NULL;
+	const char *sep = " \t\n";
+
+	if (!fp || !mntbuf || !buf)
+		return NULL;
+
+	while ((line = fgets(buf, buflen, fp)) != NULL) {
+		if (buf[0] == '#' || buf[0] == '\n')
+			continue;
+		break;
+	}
+
+	if (!line)
+		return NULL;
+
+	mntbuf->mnt_fsname = strtok_r(buf, sep, &saveptr);
+	if (!mntbuf->mnt_fsname)
+		return NULL;
+
+	mntbuf->mnt_dir = strtok_r(NULL, sep, &saveptr);
+	if (!mntbuf->mnt_fsname)
+		return NULL;
+
+	mntbuf->mnt_type = strtok_r(NULL, sep, &saveptr);
+	if (!mntbuf->mnt_type)
+		return NULL;
+
+	mntbuf->mnt_opts = strtok_r(NULL, sep, &saveptr);
+	if (!mntbuf->mnt_opts)
+		mntbuf->mnt_opts = "";
+
+	line = strtok_r(NULL, sep, &saveptr);
+	mntbuf->mnt_freq = !line ? 0 : atoi(line);
+
+	line = strtok_r(NULL, sep, &saveptr);
+	mntbuf->mnt_passno = !line ? 0 : atoi(line);
+
+	return mntbuf;
+}
+
+struct mntent *getmntent(FILE *fp)
+{
+	static char *buf = NULL;
+	static struct mntent mntbuf;
+
+	buf = malloc(BUFLEN);
+	if (!buf)
+		perror("malloc");
+
+	return getmntent_r(fp, &mntbuf, buf, BUFLEN);
+}
-- 
1.6.5

