From c054ab7b2a3b32399f20066f7c600c208b11ef2a Mon Sep 17 00:00:00 2001
From: kergoth <kergoth@a933c7a4-9bf7-0310-9141-a2e45189604d>
Date: Sat, 1 Nov 2008 22:18:06 +0000
Subject: [PATCH 09/30] Fix use with devices that can't measure pressure, courtesy Vojtech Pavlik.

Signed-off-by: Chris Larson <clarson@kergoth.com>

git-svn-id: svn://svn.berlios.de/tslib/trunk/tslib@57 a933c7a4-9bf7-0310-9141-a2e45189604d
---
 plugins/input-raw.c |   64 +++++++++++++++++++++++++++++++++++++++++---------
 1 files changed, 52 insertions(+), 12 deletions(-)

diff --git a/plugins/input-raw.c b/plugins/input-raw.c
index 6b01fd8..e1d393e 100644
--- a/plugins/input-raw.c
+++ b/plugins/input-raw.c
@@ -49,25 +49,65 @@ struct tslib_input {
 	int	grab_events;
 };
 
+#define DIV_ROUND_UP(n,d) (((n) + (d) - 1) / (d))
+#define BIT(nr)                 (1UL << (nr))
+#define BIT_MASK(nr)            (1UL << ((nr) % BITS_PER_LONG))
+#define BIT_WORD(nr)            ((nr) / BITS_PER_LONG)
+#define BITS_PER_BYTE           8
+#define BITS_PER_LONG           (sizeof(long) * BITS_PER_BYTE)
+#define BITS_TO_LONGS(nr)       DIV_ROUND_UP(nr, BITS_PER_BYTE * sizeof(long))
+
 static int check_fd(struct tslib_input *i)
 {
 	struct tsdev *ts = i->module.dev;
 	int version;
-	u_int32_t bit;
-	u_int64_t absbit;
-
-	if (! ((ioctl(ts->fd, EVIOCGVERSION, &version) >= 0) &&
-		(version == EV_VERSION) &&
-		(ioctl(ts->fd, EVIOCGBIT(0, sizeof(bit) * 8), &bit) >= 0) &&
-		(bit & (1 << EV_ABS)) &&
-		(ioctl(ts->fd, EVIOCGBIT(EV_ABS, sizeof(absbit) * 8), &absbit) >= 0) &&
-		(absbit & (1 << ABS_X)) &&
-		(absbit & (1 << ABS_Y)) && (absbit & (1 << ABS_PRESSURE)))) {
-		fprintf(stderr, "selected device is not a touchscreen I understand\n");
+	long evbit[BITS_TO_LONGS(EV_CNT)];
+	long absbit[BITS_TO_LONGS(ABS_CNT)];
+	long keybit[BITS_TO_LONGS(KEY_CNT)];
+
+	if (ioctl(ts->fd, EVIOCGVERSION, &version) < 0) {
+		fprintf(stderr, "selected device is not a Linux input event device\n");
+		return -1;
+	}
+
+	if (version != EV_VERSION) {
+		fprintf(stderr, "selected device uses a different version of the
+event protocol than tslib was compiled for\n");
+		return -1;
+	}
+
+	if ( (ioctl(ts->fd, EVIOCGBIT(0, EV_CNT), evbit) < 0) ||
+		!(evbit[BIT_WORD(EV_ABS)] & BIT_MASK(EV_ABS)) ||
+		!(evbit[BIT_WORD(EV_KEY)] & BIT_MASK(EV_KEY)) ) {
+		fprintf(stderr, "selected device uses is not a touchscreen (must
+support ABS and KEY event types)\n");
+		return -1;
+	}
+
+	if ((ioctl(ts->fd, EVIOCGBIT(EV_ABS, ABS_CNT), absbit)) < 0 ||
+		!(absbit[BIT_WORD(ABS_X)] & BIT_MASK(ABS_X)) ||
+		!(absbit[BIT_WORD(ABS_Y)] & BIT_MASK(ABS_Y))) {
+		fprintf(stderr, "selected device uses is not a touchscreen (must
+support ABS_X and ABS_Y events)\n");
 		return -1;
 	}
 
-	if (bit & (1 << EV_SYN))
+	/* Since some touchscreens (eg. infrared) physically can't measure pressure,
+	the input system doesn't report it on those. Tslib relies on pressure, thus
+	we set it to constant 255. It's still controlled by BTN_TOUCH - when not
+	touched, the pressure is forced to 0. */
+
+	if (!(absbit[BIT_WORD(ABS_PRESSURE)] & BIT_MASK(ABS_PRESSURE)))
+		i->current_p = 255;
+
+	if ((ioctl(ts->fd, EVIOCGBIT(EV_KEY, KEY_CNT), keybit) < 0) ||
+		!(absbit[BIT_WORD(BTN_TOUCH)] & BIT_MASK(BTN_TOUCH)) ) {
+		fprintf(stderr, "selected device uses is not a touchscreen (must
+support BTN_TOUCH events)\n");
+ 		return -1;
+ 	}
+
+	if (evbit[BIT_WORD(EV_SYN)] & BIT_MASK(EV_SYN))	
 		i->using_syn = 1;
 	
 	if (i->grab_events == GRAB_EVENTS_WANTED) {
-- 
1.6.5.2

